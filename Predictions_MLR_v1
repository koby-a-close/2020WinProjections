# Predictions_MLR_v1.py
# Created 01/13/2020 by KAC

# import warnings filter
from warnings import simplefilter

# ignore all future warnings
simplefilter(action='ignore', category=Warning)

# Load packages
import numpy as np
import pandas as pd
import statsmodels.api as sm
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score
from sklearn.metrics import mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns
from pybaseball import team_batting, team_pitching

# IMPORT DATA
# TODO: Add any changes from GBR model
data_dir = '/Users/Koby/PycharmProjects/2020RecordPredictions/Input/'
batting_2019 = pd.read_csv(data_dir + 'Batting_2019.csv')
batting_2018 = pd.read_csv(data_dir + 'Batting_2018.csv')
batting_2017 = pd.read_csv(data_dir + 'Batting_2017.csv')
pitching_2019 = pd.read_csv(data_dir + 'Pitching_2019.csv')
pitching_2018 = pd.read_csv(data_dir + 'Pitching_2018.csv')
pitching_2017 = pd.read_csv(data_dir + 'Pitching_2017.csv')
fielding_2019 = pd.read_csv(data_dir + 'Fielding_2019.csv')
fielding_2018 = pd.read_csv(data_dir + 'Fielding_2018.csv')
fielding_2017 = pd.read_csv(data_dir + 'Fielding_2017.csv')
team_records = pd.read_csv(data_dir + 'team_records.csv')

# TRAINING THE MODEL
# Training model to predict 2019 records using data from 2017 and 2018
# Team Stats: Wins
df_input = team_records.copy()
# Batting Stats: Runs Scored, wOBA, HRs, WAR
df_input['runsScored2017'] = batting_2017.R
df_input['wOBA2017'] = batting_2017.wOBA
df_input['WAR2017'] = batting_2017.WAR
df_input['runsScored2018'] = batting_2018.R
df_input['wOBA2018'] = batting_2018.wOBA
df_input['WAR2018'] = batting_2018.WAR
# Fielding Stats: DRS, Defense
df_input['DRS2017'] = fielding_2017.DRS
df_input['Def2017'] = fielding_2017.Def
df_input['DRS2018'] = fielding_2018.DRS
df_input['Def2018'] = fielding_2018.Def
# Pitching Stats: FIP, xFIP, WAR
df_input['FIP2017'] = pitching_2017.FIP
df_input['xFIP2017'] = pitching_2017.xFIP
df_input['pWAR2017'] = pitching_2017.WAR
df_input['FIP2018'] = pitching_2018.FIP
df_input['xFIP2018'] = pitching_2018.xFIP
df_input['pWAR2018'] = pitching_2018.WAR

# Started with the previous season's wins. Building in more factors to decrease average error.
X = df_input[['wins2018', 'wins2017', 'runsScored2017', 'runsScored2018', 'wOBA2017', 'wOBA2018', 'WAR2017', 'WAR2018',
              'DRS2017', 'DRS2018', 'Def2017', 'Def2018', 'FIP2017', 'FIP2018', 'xFIP2017', 'xFIP2018', 'pWAR2017',
              'pWAR2018']]
y = df_input[['wins2019']]

results = sm.OLS(y, X).fit()
print(results.summary())

# Make predictions for 2019 wins with 80% confidence interval
predictions = results.get_prediction(X)
intervals = predictions.summary_frame(alpha=0.1)
intervals['team'] = team_records.Team

win_range = intervals[['team', 'mean_ci_lower', 'mean', 'mean_ci_upper']]
win_range.mean_ci_lower = round(win_range.mean_ci_lower, 1)
win_range['mean'] = round(win_range['mean'], 1)
win_range.mean_ci_upper = round(win_range.mean_ci_upper, 1)
win_range['actual'] = team_records.wins2019

# EVALUATE MODEL PERFORMANCE
# Plots confidence interval and actual results. Goals is for all actual values to be within interval.
# NOT REALLY THAT VISUALLY PLEASING RIGHT NOW
plt.scatter(win_range.index, win_range.mean_ci_lower, c='black', marker='_')
plt.scatter(win_range.index, win_range.mean_ci_upper, c='black', marker='_')
plt.scatter(win_range.index, win_range['mean'], c='black', marker='.')
plt.scatter(win_range.index, win_range.actual, c='red', marker='.')
# plt.show()

# Accuracy: how many actual win totals within CI range?
count = 0
for i in range(len(win_range)):
    if win_range.mean_ci_lower[i] < win_range.actual[i] < win_range.mean_ci_upper[i]:
        count += 1
print("Number of predictions within CI:", count)

# Average range of confidence interval and error in predictions for 2019
mean_range = round(np.mean(win_range.mean_ci_upper - win_range.mean_ci_lower), 1)
print("Average CI Range:", mean_range)
mean_error = round(mean_absolute_error(win_range.actual, win_range['mean']), 1)
print("Average prediction error:", mean_error)


# 2020 PREDICTIONS
# Team Stats: Wins
df_input_2020 = team_records.copy()
# Batting Stats: Runs Scored, wOBA, HRs, WAR
df_input_2020['runsScored2017'] = batting_2017.R
df_input_2020['wOBA2017'] = batting_2017.wOBA
df_input_2020['WAR2017'] = batting_2017.WAR
df_input_2020['runsScored2018'] = batting_2018.R
df_input_2020['wOBA2018'] = batting_2018.wOBA
df_input_2020['WAR2018'] = batting_2018.WAR
# Fielding Stats: DRS, Defense
df_input_2020['DRS2017'] = fielding_2017.DRS
df_input_2020['Def2017'] = fielding_2017.Def
df_input_2020['DRS2018'] = fielding_2018.DRS
df_input_2020['Def2018'] = fielding_2018.Def
# Pitching Stats: FIP, xFIP, WAR
df_input_2020['FIP2017'] = pitching_2017.FIP
df_input_2020['xFIP2017'] = pitching_2017.xFIP
df_input_2020['pWAR2017'] = pitching_2017.WAR
df_input_2020['FIP2018'] = pitching_2018.FIP
df_input_2020['xFIP2018'] = pitching_2018.xFIP
df_input_2020['pWAR2018'] = pitching_2018.WAR

X_2020 = df_input_2020[['wins2018', 'wins2017', 'runsScored2017', 'runsScored2018', 'wOBA2017', 'wOBA2018', 'WAR2017', 'WAR2018',
              'DRS2017', 'DRS2018', 'Def2017', 'Def2018', 'FIP2017', 'FIP2018', 'xFIP2017', 'xFIP2018', 'pWAR2017',
              'pWAR2018']]

predictions_2020 = results.get_prediction(X_2020)
intervals_2020 = predictions_2020.summary_frame(alpha=0.1)
intervals_2020['team'] = team_records.Team

wins_2020 = intervals_2020[['team', 'mean_ci_lower', 'mean', 'mean_ci_upper']]
wins_2020.mean_ci_lower = round(wins_2020.mean_ci_lower, 1)
wins_2020['mean'] = round(wins_2020['mean'], 1)
wins_2020.mean_ci_upper = round(wins_2020.mean_ci_upper, 1)

MLR_v1 = pd.DataFrame()
MLR_v1['Team'] = team_records.Team
MLR_v1['Wins'] = round(wins_2020['mean'], 1)
print(MLR_v1.head(30))
x=1